/*
 * Copyright 2022 interactive instruments GmbH
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package de.ii.ogcapi.crud.app;

import com.github.azahnen.dagger.annotations.AutoBind;
import de.ii.ogcapi.crud.domain.ImmutableCrudConfiguration.Builder;
import de.ii.ogcapi.features.core.domain.FeaturesCoreProviders;
import de.ii.ogcapi.foundation.domain.ApiBuildingBlock;
import de.ii.ogcapi.foundation.domain.ExtensionConfiguration;
import de.ii.ogcapi.foundation.domain.ExternalDocumentation;
import de.ii.ogcapi.foundation.domain.OgcApiDataV2;
import de.ii.ogcapi.foundation.domain.SpecificationMaturity;
import java.util.Optional;
import javax.inject.Inject;
import javax.inject.Singleton;

/**
 * @title CRUD
 * @langEn Create, replace, update and delete features.
 * @langDe Erzeugen, Ersetzen, Aktualisieren und Löschen von Features.
 * @scopeEn New or updated features can be submitted in GeoJSON or JSON-FG.
 *     <p>In POST and PUT requests, the "Content-Type" header must be set to "application/geo+json".
 *     <p>In PATCH requests, the "Content-Type" header must be set to
 *     "application/merge-patch+json". The payload should include only the changed values (in the
 *     "geometry"/"place" and "properties" members). See [RFC 7396 (JSON Merge
 *     Patch)](https://www.rfc-editor.org/rfc/rfc7396) for details.
 *     <p>The properties must be in the Receivables representation, that is, according to the schema
 *     of the collection excluding properties marked as `readOnly`. For feature references, the
 *     receivables representation is a JSON object with three properties (`id`, the foreign key,
 *     `title`, a descriptive text, and `type`, the name of the type in the feature schema). To
 *     update an existing feature, the current feature to be edited can be requested in the profile
 *     `all-as-receivable`.
 *     <p>If a new or updated feature includes a geometry, the URI of the coordinate reference
 *     system must be represented in the "Content-Crs" header of the request. To avoid coordinate
 *     transformations, the geometry should be in the storage CRS.
 *     <p>Features may only have a single geometry property with scope `RECEIVABLES`. The geometry
 *     has to be represented in the "geometry" or "place" member depending on the format (with or
 *     without the JSON-FG extensions), the coordinate reference system and the geometry type (see
 *     JSON-FG for details when "place" has to be used).
 *     <p>A new feature can be created in two ways, depending on the specification of the
 *     `featureId`. If the `featureId` is generated and assigned by ldproxy during the creation,
 *     POST on `{landingPage}/collections/{collectionId}/items` is used and the URI of the generated
 *     feature is in the "Location" header of the response. If the feature ID is assigned by the
 *     client, PUT on `{landingPage}/collections/{collectionId}/items/{featureId}` has to be used.
 *     Clients can determine the behavior from the OpenAPI document or by inspecting the
 *     `supportsNonAutogeneratedResourceIds` field in the collection. Any existing "id" member in a
 *     submitted feature is ignored in all requests.
 *     <p>To validate a new or updated feature submitted in a POST or PUT request against the schema
 *     of the collection, a header `Prefer` with the value "handling=strict" can be added to the
 *     request. If the validation fails, an error is returned.
 *     <p>If the feature in a POST or PUT request is GeoJSON without the JSON-FG extensions, include
 *     a header `Link` with the value "<http://www.opengis.net/def/profile/OGC/0/rfc7946>;
 *     rel=profile" in the request. For a feature with the JSON-FG extensions, use the value
 *     "<http://www.opengis.net/def/profile/OGC/0/jsonfg>; rel=profile".
 * @scopeDe Neue oder aktualisierte Features können in GeoJSON oder JSON-FG übermittelt werden.
 *     <p>In POST- und PUT-Anfragen muss der Header "Content-Type" auf "application/geo+json"
 *     gesetzt sein.
 *     <p>In PATCH-Anfragen muss der Header "Content-Type" auf "application/merge-patch+json"
 *     gesetzt sein. Der Payload sollte nur die geänderten Werte (in den Eigenschaften
 *     "geometry"/"place" und "properties") enthalten. Details dazu finden sich in [RFC 7396 (JSON
 *     Merge Patch)](https://www.rfc-editor.org/rfc/rfc7396).
 *     <p>Die Eigenschaften müssen in der Repräsentation für Receivables vorliegen, also
 *     entsprechend dem Schema der Collection ohne die als `readOnly` gekennzeichneten
 *     Eigenschaften. Bei Objektverweisen ist die Repräsentation für Receivables ein JSON-Objekt mit
 *     drei Eigenschaften (`id`, dem Fremdschlüssel, `title`, einem beschreibenden Text, und `type`,
 *     dem Namen des Typs im Objektschema). Um ein bestehendes Feature zu aktualisieren, kann das
 *     aktuelle zu bearbeitende Feature im Profil `all-as-receivable` angefordert werden.
 *     <p>Wenn ein neues oder aktualisiertes Feature eine Geometrie enthält, muss die URI des
 *     Koordinatenreferenzsystems im Header "Content-Crs" der Anfrage angegeben werden. Um
 *     Koordinatentransformationen zu vermeiden, sollte die Geometrie im Storage-CRS vorliegen.
 *     <p>Features dürfen nur eine einzige Geometrieeigenschaft mit Scope `RECEIVABLES` haben. Die
 *     Geometrie muss in der Eigenschaft "geometry" oder "place" abhängig vom Format (mit oder ohne
 *     die JSON-FG-Erweiterungen), dem Koordinatenreferenzsystem und dem Geometrietyp dargestellt
 *     werden (Details dazu, wann "place" zu verwenden ist, finden sich in JSON-FG).
 *     <p>Ein neues Feature kann auf zwei Arten erstellt werden, abhängig von der Angabe der
 *     `featureId`. Wenn die `featureId` von ldproxy während der Erstellung generiert und zugewiesen
 *     wird, wird POST auf `{landingPage}/collections/{collectionId}/items` verwendet und die URI
 *     des generierten Features ist im Header "Location" der Antwort enthalten. Wenn die Feature-ID
 *     vom Client vergeben wird, ist PUT auf
 *     `{landingPage}/collections/{collectionId}/items/{featureId}` zu verwenden. Clients können das
 *     Verhalten aus dem OpenAPI-Dokument ermitteln oder durch Inspektion des Feldes
 *     `supportsNonAutogeneratedResourceIds` in der Collection. Eine bestehende "id"-Eigenschaft in
 *     einem übermittelten Feature wird in allen Anfragen ignoriert.
 *     <p>Um ein in einer POST- oder PUT-Anfrage übermitteltes neues oder aktualisiertes Feature
 *     gegen das Schema der Collection zu validieren, kann der Anfrage ein Header `Prefer` mit dem
 *     Wert "handling=strict" hinzugefügt werden. Wenn die Validierung fehlschlägt, wird ein Fehler
 *     zurückgegeben.
 *     <p>Wenn das Feature in einer POST- oder PUT-Anfrage GeoJSON ohne die JSON-FG-Erweiterungen
 *     ist, fügen Sie der Anfrage einen Header `Link` mit dem Wert
 *     "<http://www.opengis.net/def/profile/OGC/0/rfc7946>; rel=profile" hinzu. Für ein Feature mit
 *     den JSON-FG-Erweiterungen verwenden Sie den Wert
 *     "<http://www.opengis.net/def/profile/OGC/0/jsonfg>; rel=profile".
 * @limitationsEn Only feature types from an SQL feature provider with `dialect` `PGIS` and
 *     `datasetChanges.mode` `CRUD` are supported.
 *     <p>The features may only have a single geometry property with scope `RECEIVABLES`.
 * @limitationsDe Es werden nur Objektarten von einem SQL-Feature-Provider mit `dialect` `PGIS` und
 *     `datasetChanges.mode` `CRUD` unterstützt.
 *     <p>Die Features dürfen nur eine einzige Geometrieeigenschaft mit dem Geltungsbereich
 *     `RECEIVABLES` haben.
 * @conformanceEn The building block is based on the specifications of the conformance classes
 *     "Create/Replace/Delete", "Update", "Optimistic Locking using Timestamps" and "Features" from
 *     the [Draft OGC API - Features - Part 4: Create, Replace, Update and
 *     Delete](https://docs.ogc.org/DRAFTS/20-002r1.html). The implementation will change as the
 *     draft will evolve during the standardization process.
 * @conformanceDe Der Baustein basiert auf den Vorgaben der Konformitätsklassen
 *     "Create/Replace/Delete", "Update", "Optimistic Locking using Timestamps" und "Features" aus
 *     dem [Entwurf von OGC API - Features - Part 4: Create, Replace, Update and
 *     Delete](https://docs.ogc.org/DRAFTS/20-002r1.html). Die Implementierung wird sich im Zuge der
 *     weiteren Standardisierung der Spezifikation noch ändern.
 * @ref:cfg {@link de.ii.ogcapi.crud.domain.CrudConfiguration}
 * @ref:cfgProperties {@link de.ii.ogcapi.crud.domain.ImmutableCrudConfiguration}
 * @ref:endpoints {@link de.ii.ogcapi.crud.app.EndpointCrud}
 * @ref:pathParameters {@link de.ii.ogcapi.features.core.domain.PathParameterCollectionIdFeatures}
 */
@Singleton
@AutoBind
public class CrudBuildingBlock implements ApiBuildingBlock {

  public static final Optional<SpecificationMaturity> MATURITY =
      Optional.of(SpecificationMaturity.DRAFT_OGC);
  public static final Optional<ExternalDocumentation> SPEC =
      Optional.of(
          ExternalDocumentation.of(
              "https://docs.ogc.org/DRAFTS/20-002r1.html",
              "OGC API - Features - Part 4: Create, Replace, Update and Delete (DRAFT)"));

  private final FeaturesCoreProviders providers;

  @Inject
  public CrudBuildingBlock(FeaturesCoreProviders providers) {
    this.providers = providers;
  }

  @Override
  public boolean isEnabledForApi(OgcApiDataV2 apiData) {
    return isProviderSupportsMutations(apiData) && ApiBuildingBlock.super.isEnabledForApi(apiData);
  }

  @Override
  public boolean isEnabledForApi(OgcApiDataV2 apiData, String collectionId) {
    return isProviderSupportsMutations(apiData)
        && ApiBuildingBlock.super.isEnabledForApi(apiData, collectionId);
  }

  @Override
  public ExtensionConfiguration getDefaultConfiguration() {
    return new Builder().enabled(false).optimisticLockingLastModified(false).build();
  }

  private boolean isProviderSupportsMutations(OgcApiDataV2 apiData) {
    return providers
        .getFeatureProvider(apiData)
        .filter(provider -> provider.mutations().isSupported())
        .isPresent();
  }
}
