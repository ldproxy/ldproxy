/*
 * Copyright 2022 interactive instruments GmbH
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package de.ii.ogcapi.crud.app;

import com.github.azahnen.dagger.annotations.AutoBind;
import de.ii.ogcapi.collections.domain.CollectionExtension;
import de.ii.ogcapi.collections.domain.ImmutableOgcApiCollection.Builder;
import de.ii.ogcapi.crud.domain.CrudConfiguration;
import de.ii.ogcapi.features.core.domain.FeaturesCoreProviders;
import de.ii.ogcapi.foundation.domain.ApiMediaType;
import de.ii.ogcapi.foundation.domain.ExtensionConfiguration;
import de.ii.ogcapi.foundation.domain.FeatureTypeConfigurationOgcApi;
import de.ii.ogcapi.foundation.domain.OgcApi;
import de.ii.xtraplatform.features.domain.FeatureInfo;
import de.ii.xtraplatform.features.domain.FeatureProvider;
import de.ii.xtraplatform.features.domain.FeatureSchema;
import de.ii.xtraplatform.web.domain.URICustomizer;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import javax.inject.Inject;
import javax.inject.Singleton;

/** add CRUD information to the collection information */
@Singleton
@AutoBind
public class AutoGeneratedIdsOnCollection implements CollectionExtension {

  private final FeaturesCoreProviders providers;

  @Inject
  public AutoGeneratedIdsOnCollection(FeaturesCoreProviders providers) {
    this.providers = providers;
  }

  @Override
  public Class<? extends ExtensionConfiguration> getBuildingBlockConfigurationType() {
    return CrudConfiguration.class;
  }

  @Override
  public Builder process(
      Builder collection,
      FeatureTypeConfigurationOgcApi featureTypeConfiguration,
      OgcApi api,
      URICustomizer uriCustomizer,
      boolean isNested,
      ApiMediaType mediaType,
      List<ApiMediaType> alternateMediaTypes,
      Optional<Locale> language) {
    Optional<FeatureInfo> info =
        providers
            .getFeatureProvider(api.getData(), featureTypeConfiguration)
            .map(FeatureProvider::info);
    Optional<String> featureType =
        providers
            .getFeatureSchema(api.getData(), featureTypeConfiguration)
            .map(FeatureSchema::getName);

    if (isExtensionEnabled(featureTypeConfiguration, CrudConfiguration.class)
        && info.isPresent()
        && featureType.isPresent()) {

      boolean supportsNonAutogeneratedResourceIds = !info.get().hasGeneratedId(featureType.get());

      collection.putExtensions(
          "supportsNonAutogeneratedResourceIds", supportsNonAutogeneratedResourceIds);
    }

    return collection;
  }
}
