apply plugin: 'com.github.node-gradle.node'
apply plugin: 'de.undercouch.download'

node {
    version = '20.10.0'
    yarnVersion = 'berry'
    download = project.findProperty('downloadNode') != 'false' ?: false
    // do not declare the repository, that is not allowed outside of settings.gradle
    // it is automatically added by the settings plugin
    distBaseUrl = null
}

ext {
    workingDir = new File(project.buildDir, 'markdown').absolutePath
    cliVersion = 'v4.2.0'
    editorVersion = 'v1.1.0'
    xtratilerVersion = 'main' //'v1.0.0'
}

def docsDownload(List<String> files, File targetDir, Closure<?> process = null) {
    download.run {
        src files
        dest targetDir
        onlyIfModified true
        useETag "all"
        if (process != null) {
            eachFile process
        }
    }
}

tasks.register('docsAssembleCli') {
    doLast {
        def baseUrl = "https://raw.githubusercontent.com/interactive-instruments/xtraplatform-cli/${cliVersion}"
        def files = ["${baseUrl}/xtractl/README.md", "${baseUrl}/xtractl/COMMANDS.md", "${baseUrl}/xtracfg/README.md", "${baseUrl}/xtracfg/COMMANDS.md"]
        def filesDe = ["${baseUrl}/xtractl/README_DE.md", "${baseUrl}/xtractl/COMMANDS.md", "${baseUrl}/xtracfg/README_DE.md", "${baseUrl}/xtracfg/COMMANDS.md"]
        def targetDir = new File(project.buildDir, 'tmp/tools/tools')
        def targetDirDe = new File(project.buildDir, 'tmp/tools/de/tools')
        def process = { f ->
            def name = f.path == "README_DE.md" ? "README.md" : f.path
            if (f.sourceURL.path.contains('xtractl')) {
                f.path = "xtractl/${name}"
            } else if (f.sourceURL.path.contains('xtracfg')) {
                f.path = "xtracfg/${name}"
            }
        }

        docsDownload(files, targetDir, process)
        docsDownload(filesDe, targetDirDe, process)
    }
}

tasks.register('docsAssembleEditor') {
    doLast {
        def baseUrl = "https://raw.githubusercontent.com/ldproxy/editor/${editorVersion}"
        def files = ["${baseUrl}/README.md", "${baseUrl}/docs/screenshot.png", "${baseUrl}/docs/screenshot2.png", "${baseUrl}/docs/screenshot3.png"]
        def filesDe = ["${baseUrl}/README_DE.md", "${baseUrl}/docs/screenshot.png", "${baseUrl}/docs/screenshot2.png", "${baseUrl}/docs/screenshot3.png"]
        def files2 = ["${baseUrl}/docs/screenshot.png", "${baseUrl}/docs/screenshot2.png", "${baseUrl}/docs/screenshot3.png"]
        def filesDe2 = ["${baseUrl}/docs/screenshot.png", "${baseUrl}/docs/screenshot2.png", "${baseUrl}/docs/screenshot3.png"]
        def targetDir = new File(project.buildDir, 'tmp/tools/tools')
        def targetDirDe = new File(project.buildDir, 'tmp/tools/de/tools')
        def process = { f ->
            def name = f.path == "README_DE.md" ? "README.md" : f.path
            f.path = "editor/${name}"
        }
        def process2 = { f ->
            def name = f.path == "README_DE.md" ? "README.md" : f.path
            f.path = "editor/docs/${name}"
        }

        docsDownload(files, targetDir, process)
        docsDownload(filesDe, targetDirDe, process)
        docsDownload(files2, targetDir, process2)
        docsDownload(filesDe2, targetDirDe, process2)
    }
}

tasks.register('docsAssembleXtratiler') {
    doLast {
        def baseUrl = "https://raw.githubusercontent.com/ldproxy/xtratiler/${xtratilerVersion}"
        def files = ["${baseUrl}/docs/en/README.md", "${baseUrl}/docs/COMMANDS.md"]
        def filesDe = ["${baseUrl}/docs/de/README.md", "${baseUrl}/docs/COMMANDS.md"]
        def targetDir = new File(project.buildDir, 'tmp/tools/tools')
        def targetDirDe = new File(project.buildDir, 'tmp/tools/de/tools')
        def process = { f ->
            def name = f.path
            f.path = "xtratiler/${name}"
        }

        docsDownload(files, targetDir, process)
        docsDownload(filesDe, targetDirDe, process)
    }
}

tasks.register('docsAssemble', Sync) {
    dependsOn tasks.named("docsAssembleCli")
    dependsOn tasks.named("docsAssembleEditor")
    dependsOn tasks.named("docsAssembleXtratiler")
    finalizedBy tasks.named('markdownAssemble')

    from(file('src/markdown/docs')) {
        exclude 'en'
    }
    from file('src/markdown/docs/en')
    from new File(project.buildDir, 'tmp/tools')
    from tasks.named('docsExtract')

    into new File(project.buildDir, 'markdown/docs')
    //duplicatesStrategy = 'INCLUDE'
}

tasks.register('markdownAssemble', Copy) {
    from file('src/markdown')
    into new File(project.buildDir, 'markdown')
    include "*.*"
    include ".yarn/releases/*.*"
}

yarn_install {
    dependsOn tasks.named("docsAssemble")
    dependsOn tasks.named("markdownAssemble")
    inputs.file("${project.workingDir}/package.json")
    inputs.file("${project.workingDir}/yarn.lock")
    outputs.dir("${project.workingDir}/node_modules")
    outputs.dir("${project.workingDir}/.yarn/cache")
    execOverrides {
        it.workingDir = project.workingDir
    }
}

task docsVuepress(type: YarnTask) {
    dependsOn yarn_install
    inputs.file("${project.workingDir}/package.json")
    inputs.file("${project.workingDir}/yarn.lock")
    inputs.dir("${project.workingDir}/docs")
    outputs.dir("${project.workingDir}/docs/.vuepress/dist")
    execOverrides {
        it.workingDir = project.workingDir
    }
    args = ['run', 'docs:build']
}

task docsVuepressDev(type: YarnTask) {
    dependsOn yarn_install
    inputs.file("${project.workingDir}/package.json")
    inputs.file("${project.workingDir}/yarn.lock")
    inputs.dir("${project.workingDir}/docs")
    outputs.upToDateWhen { false }
    execOverrides {
        it.workingDir = project.workingDir
    }
    environment = ['DOCS_VERSION': 'next']
    args = ['run', 'docs:dev']
}
